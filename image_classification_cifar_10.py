# -*- coding: utf-8 -*-
"""image_classification_cifar-10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/117IcAAY2eA7oHeSWrB3h9rrrlvK8FeR2
"""

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense,Flatten,Conv2D,MaxPool2D,Dropout
from tensorflow.keras import layers
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")

from keras.datasets import cifar10
(x_train,y_train),(x_test,y_test)=cifar10.load_data()

print('x_train shape:',x_train.shape)
print('y_train shape:',y_train.shape)
print('x_test shape:',x_test.shape)
print('y_test shape:',y_test.shape)

img=plt.imshow(x_train[0])

classification=['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

y_train_one_hot=to_categorical(y_train)
y_test_one_hot=to_categorical(y_test)

x_train=x_train/255
x_test=x_test/255

model=Sequential()
model.add(Conv2D(32,(5,5),activation='relu',input_shape=(32,32,3)))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(32,(5,5),activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(500,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(250,activation='relu'))

model.add(Dense(10,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

hist=model.fit(x_train,y_train_one_hot,batch_size=256,epochs=10,validation_split=0.2)

model.evaluate(x_test,y_test_one_hot)[1]

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('model accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['train','val'],loc='uppper right')
plt.show()

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('model loss')
plt.xlabel('Epoch')
plt.ylabel('loss')
plt.legend(['train','val'],loc='uppper right')
plt.show()

#test the model
from google.colab import files
upload=files.upload()

new_image=plt.imread("5KvPB.jpg")
img=plt.imshow(new_image)

from skimage.transform import resize
resize_image=resize(new_image,(32,32,3))
img=plt.imshow(resize_image)

predictions=model.predict(np.array([resize_image]))
predictions

list_index=[0,1,2,3,4,5,6,7,8,9]
x=predictions
for i in range(10):
  for j in range(10):
    if x[0][list_index[i]] > x [0][list_index[j]]:
      temp=list_index[i]
      list_index[i]=list_index[j]
      list_index[j]=temp

print(list_index)

for i in range(5):
  print(classification[list_index[i]], ':' ,predictions[0][list_index[i]] * 100,"%")

